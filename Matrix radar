import numpy as np
import matplotlib.pyplot as plot
import random



class Radar:
    def __init__(self, size, front_value, lower_value, value_from_right, value_from_left):

        self.total_size = size

        self.front_value = front_value
        self.lower_value = lower_value
        self.value_from_right = value_from_right
        self.value_from_left = value_from_left

    def calc_only_front_row(self, front_map):
        if self.front_value:
            front_map[self.front_value] = self.front_value

    def calc_front_row_and_right_col_from_right(self, front_map):
        if self.value_from_right:
            front_map[0:self.front_value, -self.value_from_right - 1] = self.value_from_right
            front_map[self.front_value, -self.value_from_right - 1] = self.front_value+self.value_from_right

    def calc_front_row_and_left_col_from_left(self, front_map):
        if self.value_from_left:
            front_map[0:self.front_value, self.value_from_left] = self.value_from_left
            front_map[self.front_value, self.value_from_left] = self.front_value+self.value_from_left

    def front_view_radar(self):

        front_map = np.zeros((self.total_size, self.total_size), dtype=int)

        self.calc_only_front_row(front_map)

        self.calc_front_row_and_right_col_from_right(front_map)

        self.calc_front_row_and_left_col_from_left(front_map)

        print(f'\nFront radar :\n\n{front_map[::-1]}\n\n')
        return front_map[::-1]

    def calc_only_lower_row(self, hind_map):
        if self.lower_value:
            hind_map[self.lower_value] = self.lower_value

    def calc_hind_and_right_row(self, hind_map):
        if self.value_from_right:
            hind_map[0:self.lower_value, self.value_from_right] = self.value_from_right
            hind_map[self.lower_value, self.value_from_right] = self.lower_value+self.value_from_right

    def calc_hind_and_left_row(self, hind_map):
        if self.value_from_left:
            hind_map[0:self.lower_value, -self.value_from_left - 1] = self.value_from_left
            hind_map[self.lower_value, -self.value_from_left - 1] = self.lower_value+self.value_from_left

    def hind_view_radar(self):

        hind_map = np.zeros((self.total_size, self.total_size), dtype=int)

        self.calc_only_lower_row(hind_map)

        self.calc_hind_and_right_row(hind_map)

        self.calc_hind_and_left_row(hind_map)

        print(f'Hind radar :\n\n{hind_map}\n\n')
        return hind_map

    def calc_only_righter_col(self, right_map):
        if self.value_from_right:
            right_map[:, self.value_from_right] = self.value_from_right

    def calc_right_row_from_up(self, right_map):
        if self.value_from_right:
            right_map[self.value_from_right, self.value_from_right:] = self.value_from_right
            right_map[self.value_from_right, self.value_from_right] = self.value_from_right+self.value_from_right

    def right_side_radar(self):

        right_map = np.zeros((self.total_size, self.total_size), dtype=int)

        self.calc_only_righter_col(right_map)

        self.calc_right_row_from_up(right_map)

        print(f'Right radar: \n\n{right_map}\n\n')
        return right_map

    def calc_only_left_col(self, left_map):
        if self.value_from_left:
            left_map[:, -1-self.value_from_left] = self.value_from_left

    def calc_left_row_from_up(self, left_map):
        if self.value_from_right:
            left_map[self.value_from_left, :-self.value_from_left] = self.value_from_left
            left_map[self.value_from_left, -self.value_from_left-1] = self.value_from_left+self.value_from_left

    def left_side_radar(self):

        left_map = np.zeros((self.total_size, self.total_size), dtype=int)

        self.calc_only_left_col(left_map)

        self.calc_left_row_from_up(left_map)

        print(f'Left radar: \n\n{left_map}\n\n')
        return left_map


obj = Radar(size=20, front_value=15, lower_value=3, value_from_left=6, value_from_right=8)
front = obj.front_view_radar()
hind = obj.hind_view_radar()
right = obj.right_side_radar()
left = obj.left_side_radar()
